/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module DIG_Counter_Nbit
#(
    parameter Bits = 2
)
(
    output [(Bits-1):0] out,
    output ovf,
    input C,
    input en,
    input clr
);
    reg [(Bits-1):0] count;

    always @ (posedge C) begin
        if (clr)
          count <= 'h0;
        else if (en)
          count <= count + 1'b1;
    end

    assign out = count;
    assign ovf = en? &count : 1'b0;

    initial begin
        count = 'h0;
    end
endmodule


module counter (
  input clk,
  input start,
  input rst,
  output endd
);
  wire s0;
  wire [9:0] s1;
  wire endd_temp;
  DIG_Counter_Nbit #(
    .Bits(10)
  )
  DIG_Counter_Nbit_i0 (
    .en( start ),
    .C( clk ),
    .clr( s0 ),
    .out( s1 )
  );
  assign s0 = (~ rst | endd_temp);
  assign endd_temp = ((~ s1[0] & ~ s1[1] & ~ s1[2] & s1[3] & ~ s1[4]) & (s1[5] & s1[6] & s1[7] & s1[8] & s1[9]));
  assign endd = endd_temp;
endmodule
