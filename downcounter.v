/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module DIG_D_FF_AS_1bit
#(
    parameter Default = 0
)
(
   input Set,
   input D,
   input C,
   input Clr,
   output Q,
   output \~Q
);
    reg state;

    assign Q = state;
    assign \~Q  = ~state;

    always @ (posedge C or posedge Clr or posedge Set)
    begin
        if (Set)
            state <= 1'b1;
        else if (Clr)
            state <= 'h0;
        else
            state <= D;
    end

    initial begin
        state = Default;
    end
endmodule

module Mux_4x1
(
    input [1:0] sel,
    input in_0,
    input in_1,
    input in_2,
    input in_3,
    output reg out
);
    always @ (*) begin
        case (sel)
            2'h0: out = in_0;
            2'h1: out = in_1;
            2'h2: out = in_2;
            2'h3: out = in_3;
            default:
                out = 'h0;
        endcase
    end
endmodule


module downcounter_new (
  input EN,
  input LOAD,
  input [3:0] IN,
  input CLK,
  input RESET,
  output [3:0] CNT,
  output ZERO
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  wire [1:0] s11;
  wire s12;
  wire s13;
  wire s14;
  wire [1:0] s15;
  wire s16;
  wire s17;
  wire s18;
  wire [1:0] s19;
  wire s20;
  wire s21;
  wire s22;
  wire [1:0] s23;
  assign s11[0] = EN;
  assign s11[1] = LOAD;
  assign s8 = ~ RESET;
  assign s0 = IN[0];
  assign s1 = IN[1];
  assign s2 = IN[2];
  assign s3 = IN[3];
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i0 (
    .Set( s8 ),
    .D( s9 ),
    .C( CLK ),
    .Clr( 1'b0 ),
    .Q( s4 ),
    .\~Q ( s10 )
  );
  Mux_4x1 Mux_4x1_i1 (
    .sel( s11 ),
    .in_0( s4 ),
    .in_1( s10 ),
    .in_2( s0 ),
    .in_3( s0 ),
    .out( s9 )
  );
  assign s12 = (s10 & EN);
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i2 (
    .Set( s8 ),
    .D( s13 ),
    .C( CLK ),
    .Clr( 1'b0 ),
    .Q( s5 ),
    .\~Q ( s14 )
  );
  Mux_4x1 Mux_4x1_i3 (
    .sel( s15 ),
    .in_0( s5 ),
    .in_1( s14 ),
    .in_2( s1 ),
    .in_3( s1 ),
    .out( s13 )
  );
  assign s15[0] = s12;
  assign s15[1] = LOAD;
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i4 (
    .Set( s8 ),
    .D( s17 ),
    .C( CLK ),
    .Clr( 1'b0 ),
    .Q( s6 ),
    .\~Q ( s18 )
  );
  Mux_4x1 Mux_4x1_i5 (
    .sel( s19 ),
    .in_0( s6 ),
    .in_1( s18 ),
    .in_2( s2 ),
    .in_3( s2 ),
    .out( s17 )
  );
  assign s19[0] = s16;
  assign s19[1] = LOAD;
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i6 (
    .Set( s8 ),
    .D( s21 ),
    .C( CLK ),
    .Clr( 1'b0 ),
    .Q( s7 ),
    .\~Q ( s22 )
  );
  Mux_4x1 Mux_4x1_i7 (
    .sel( s23 ),
    .in_0( s7 ),
    .in_1( s22 ),
    .in_2( s3 ),
    .in_3( s3 ),
    .out( s21 )
  );
  assign s23[0] = s20;
  assign s23[1] = LOAD;
  assign CNT[0] = s4;
  assign CNT[1] = s5;
  assign CNT[2] = s6;
  assign CNT[3] = s7;
  assign s16 = (s14 & s12);
  assign s20 = (s18 & s16);
  assign ZERO = (s22 & s20);
endmodule

module downcounter (
  input rst,
  input count,
  input load,
  input [3:0] pm10,
  input [3:0] pm1,
  input [3:0] ps10,
  input [3:0] ps1,
  input c1khz,
  output [3:0] s1,
  output [3:0] s10,
  output [3:0] m1,
  output [3:0] m10,
  output zero
);
  wire s0;
  wire s2;
  wire [3:0] s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire [3:0] s8;
  wire s9;
  wire s11;
  wire [3:0] s12;
  wire s13;
  wire [3:0] s14;
  wire s15;
  wire [3:0] s16;
  wire [3:0] s17;
  wire [3:0] s18;
  wire [3:0] s19;
  wire [3:0] s20;
  wire [3:0] s21;
  wire [3:0] s22;
  wire [3:0] s23;
  wire s24;
  wire [3:0] s25;
  wire [3:0] s26;
  wire [3:0] s27;
  wire [3:0] s28;
  assign s16[0] = 1'b1;
  assign s16[1] = 1'b0;
  assign s16[2] = 1'b0;
  assign s16[3] = 1'b1;
  assign s20[0] = 1'b1;
  assign s20[1] = 1'b0;
  assign s20[2] = 1'b0;
  assign s20[3] = 1'b1;
  assign s18[0] = 1'b1;
  assign s18[1] = 1'b0;
  assign s18[2] = 1'b1;
  assign s18[3] = 1'b0;
  assign s22[0] = 1'b1;
  assign s22[1] = 1'b0;
  assign s22[2] = 1'b0;
  assign s22[3] = 1'b1;
  assign s26[0] = 1'b0;
  assign s26[1] = 1'b0;
  assign s26[2] = 1'b0;
  assign s26[3] = 1'b0;
  assign s25[0] = 1'b0;
  assign s25[1] = 1'b0;
  assign s25[2] = 1'b0;
  assign s25[3] = 1'b0;
  assign s27[0] = 1'b0;
  assign s27[1] = 1'b0;
  assign s27[2] = 1'b0;
  assign s27[3] = 1'b0;
  assign s28[0] = 1'b0;
  assign s28[1] = 1'b0;
  assign s28[2] = 1'b0;
  assign s28[3] = 1'b0;
  assign s24 = ~ rst;
  assign s15 = (s24 | load);
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i0 (
    .sel( s24 ),
    .in_0( pm1 ),
    .in_1( s25 ),
    .out( s17 )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i1 (
    .sel( s24 ),
    .in_0( pm10 ),
    .in_1( s26 ),
    .out( s23 )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i2 (
    .sel( s24 ),
    .in_0( ps10 ),
    .in_1( s27 ),
    .out( s19 )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i3 (
    .sel( s24 ),
    .in_0( ps1 ),
    .in_1( s28 ),
    .out( s21 )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i4 (
    .sel( s15 ),
    .in_0( s16 ),
    .in_1( s17 ),
    .out( s8 )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i5 (
    .sel( s15 ),
    .in_0( s18 ),
    .in_1( s19 ),
    .out( s12 )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i6 (
    .sel( s15 ),
    .in_0( s20 ),
    .in_1( s21 ),
    .out( s14 )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i7 (
    .sel( s15 ),
    .in_0( s22 ),
    .in_1( s23 ),
    .out( s3 )
  );
  assign s4 = ((s15 & c1khz) | count);
  downcounter_new downcounter_new_i8 (
    .EN( s0 ),
    .LOAD( s2 ),
    .IN( s3 ),
    .CLK( s4 ),
    .RESET( 1'b1 ),
    .CNT( m10 ),
    .ZERO( s5 )
  );
  downcounter_new downcounter_new_i9 (
    .EN( s6 ),
    .LOAD( s7 ),
    .IN( s8 ),
    .CLK( s4 ),
    .RESET( 1'b1 ),
    .CNT( m1 ),
    .ZERO( s0 )
  );
  downcounter_new downcounter_new_i10 (
    .EN( s9 ),
    .LOAD( s11 ),
    .IN( s12 ),
    .CLK( s4 ),
    .RESET( 1'b1 ),
    .CNT( s10 ),
    .ZERO( s6 )
  );
  downcounter_new downcounter_new_i11 (
    .EN( 1'b1 ),
    .LOAD( s13 ),
    .IN( s14 ),
    .CLK( s4 ),
    .RESET( 1'b1 ),
    .CNT( s1 ),
    .ZERO( s9 )
  );
  assign s7 = (s0 | s15);
  assign s11 = (s6 | s15);
  assign s13 = (s9 | s15);
  assign s2 = (s5 | s15);
  assign zero = (s9 & s5 & s0 & s6);
endmodule
